# Standard Eng.YAML CICD template
name: CI/CD [container-name]-[environment]

on:
  push:
    branches:   # Only one branch should be selected here, the one mapping to the envrionment this workflow deploys to
      - main
      - develop
env:
  NEXUS_USERNAME: ${{ secrets.NEXUS_USERNAME }}
  NEXUS_PASSWORD: ${{ secrets.NEXUS_PASSWORD }}
  DEPLOY_ENV: "production|qa|staging" # replace with actual value

concurrency: 
  group: ${{ github.head_ref }}
  cancel-in-progress: true

jobs:
  provision-environment:
    runs-on: ubuntu-latest
    steps:
      - id: checkout
        name: Checkout environment source code # OPTIONAL If environment provisiong needs scripts from repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - id: provision-environment
        name: Provision environment for this container
        run: echo "provision environment" # replace with actual code
  build:
    runs-on: ubuntu-latest
    needs: provision-environment
    steps:
      - id: checkout
        name: Checkout container source code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - id: setup
        name: Prepare build server 
        run: echo "pre-build" # replace with actual code
      - id: build
        name: Build the container code
        run: echo "build" # replace with actual code
      - id: unit-test
        name: Run unit tests
        run: echo "test" # replace with actual code
      - id: analysis  # OPTIONAL
        name: Run code analysis
        run: echo "Run code analysis" # replace with actual code
      - id: publish # OPTIONAL
        name: Publish built artifacts
        uses: publish-devfactory-nexus@v1 # example action for Devfactory Nexus
        with:
          serverUrl: https://nexus.devfactory.com/
          username: $NEXUS_USERNAME
          password: $NEXUS_PASSWORD
          repository: maven-releases
          coordinates: groupId=com.example artifactId=app version=1.0.0
          assets: extension=jar
          filename: ./target/app-1.0.0.jar
  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - id: deploy
        name: Deploy the container
        run: echo "deploy to $DEPLOY_ENV environment" # replace with actual code
  integration-test:
    runs-on: ubuntu-latest
    needs: deploy
    steps:        
      - id: integration-test
      - name: Run integration tests on container
        run: echo "run integration test" # replace with actual code
  health-check:
    runs-on: ubuntu-latest
    needs: deploy
    steps:        
      - id: health-check
        name: Run health check on deployed artifacts
        uses: healthcheck-httpStatus@v1 # example action using http status
        with:
          # Check the following URLs one by one sequentially
          url: https://example.com|http://example.com
          # Follow redirects, or just report success on 3xx status codes
          follow-redirect: no # Optional, defaults to "no"
          # Fail this action after this many failed attempts
          max-attempts: 3 # Optional, defaults to 1
          # Delay between retries
          retry-delay: 5s # Optional, only applicable to max-attempts > 1
          # Retry all errors, including 404. This option might trigger curl upgrade.
          retry-all: no # Optional, defaults to "no"
